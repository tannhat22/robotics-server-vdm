/* tslint:disable */
/* eslint-disable */
/**
 * RMF API Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "./base";

/**
 *
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
  /**
   *
   * @type {any}
   * @memberof HTTPValidationError
   */
  detail?: any;
}
/**
 *
 * @export
 * @interface Robot
 */
export interface Robot {
  /**
   * The serial number is preset at the factory
   * @type {any}
   * @memberof Robot
   */
  serial_no: any;
  /**
   *
   * @type {any}
   * @memberof Robot
   */
  name: any;
  /**
   *
   * @type {any}
   * @memberof Robot
   */
  ip_address: any;
}
/**
 *
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
  /**
   *
   * @type {any}
   * @memberof ValidationError
   */
  loc: any;
  /**
   *
   * @type {any}
   * @memberof ValidationError
   */
  msg: any;
  /**
   *
   * @type {any}
   * @memberof ValidationError
   */
  type: any;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * # NOTE: This endpoint is here for documentation purposes only, this is _not_ a REST endpoint.  ## About This exposes a minimal pubsub system built on top of socket.io. It works similar to a normal socket.io endpoint, except that are 2 special rooms which control subscriptions.  ## Rooms ### subscribe Clients must send a message to this room to start receiving messages on other rooms. The message must be of the form:  ``` {     \"room\": \"<room_name>\" } ```  ### unsubscribe Clients can send a message to this room to stop receiving messages on other rooms. The message must be of the form:  ``` {     \"room\": \"<room_name>\" } ```
     * @summary Socket.io endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lambdaSocketIoGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/socket.io`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     * # NOTE: This endpoint is here for documentation purposes only, this is _not_ a REST endpoint.  ## About This exposes a minimal pubsub system built on top of socket.io. It works similar to a normal socket.io endpoint, except that are 2 special rooms which control subscriptions.  ## Rooms ### subscribe Clients must send a message to this room to start receiving messages on other rooms. The message must be of the form:  ``` {     \"room\": \"<room_name>\" } ```  ### unsubscribe Clients can send a message to this room to stop receiving messages on other rooms. The message must be of the form:  ``` {     \"room\": \"<room_name>\" } ```
     * @summary Socket.io endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async lambdaSocketIoGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.lambdaSocketIoGet(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     * # NOTE: This endpoint is here for documentation purposes only, this is _not_ a REST endpoint.  ## About This exposes a minimal pubsub system built on top of socket.io. It works similar to a normal socket.io endpoint, except that are 2 special rooms which control subscriptions.  ## Rooms ### subscribe Clients must send a message to this room to start receiving messages on other rooms. The message must be of the form:  ``` {     \"room\": \"<room_name>\" } ```  ### unsubscribe Clients can send a message to this room to stop receiving messages on other rooms. The message must be of the form:  ``` {     \"room\": \"<room_name>\" } ```
     * @summary Socket.io endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lambdaSocketIoGet(options?: any): AxiosPromise<any> {
      return localVarFp
        .lambdaSocketIoGet(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   * # NOTE: This endpoint is here for documentation purposes only, this is _not_ a REST endpoint.  ## About This exposes a minimal pubsub system built on top of socket.io. It works similar to a normal socket.io endpoint, except that are 2 special rooms which control subscriptions.  ## Rooms ### subscribe Clients must send a message to this room to start receiving messages on other rooms. The message must be of the form:  ``` {     \"room\": \"<room_name>\" } ```  ### unsubscribe Clients can send a message to this room to stop receiving messages on other rooms. The message must be of the form:  ``` {     \"room\": \"<room_name>\" } ```
   * @summary Socket.io endpoint
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public lambdaSocketIoGet(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .lambdaSocketIoGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * RobotsApi - axios parameter creator
 * @export
 */
export const RobotsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Create Robot
     * @param {Robot} robot
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRobotRobotsPost: async (
      robot: Robot,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'robot' is not null or undefined
      assertParamExists("createRobotRobotsPost", "robot", robot);
      const localVarPath = `/robots`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        robot,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Destroy
     * @param {any} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    destroyRobotsIdDelete: async (
      id: any,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("destroyRobotsIdDelete", "id", id);
      const localVarPath = `/robots/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get Robot
     * @param {any} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRobotRobotsIdGet: async (
      id: any,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getRobotRobotsIdGet", "id", id);
      const localVarPath = `/robots/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get Robots
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRobotsRobotsGet: async (
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/robots`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update Robot
     * @param {any} id
     * @param {Robot} robot
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRobotRobotsIdPut: async (
      id: any,
      robot: Robot,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updateRobotRobotsIdPut", "id", id);
      // verify required parameter 'robot' is not null or undefined
      assertParamExists("updateRobotRobotsIdPut", "robot", robot);
      const localVarPath = `/robots/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        robot,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RobotsApi - functional programming interface
 * @export
 */
export const RobotsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RobotsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Create Robot
     * @param {Robot} robot
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createRobotRobotsPost(
      robot: Robot,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.createRobotRobotsPost(robot, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Destroy
     * @param {any} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async destroyRobotsIdDelete(
      id: any,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.destroyRobotsIdDelete(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Get Robot
     * @param {any} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRobotRobotsIdGet(
      id: any,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Robot>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getRobotRobotsIdGet(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Get Robots
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRobotsRobotsGet(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getRobotsRobotsGet(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
    /**
     *
     * @summary Update Robot
     * @param {any} id
     * @param {Robot} robot
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateRobotRobotsIdPut(
      id: any,
      robot: Robot,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateRobotRobotsIdPut(
          id,
          robot,
          options,
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration,
      );
    },
  };
};

/**
 * RobotsApi - factory interface
 * @export
 */
export const RobotsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = RobotsApiFp(configuration);
  return {
    /**
     *
     * @summary Create Robot
     * @param {Robot} robot
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRobotRobotsPost(robot: Robot, options?: any): AxiosPromise<any> {
      return localVarFp
        .createRobotRobotsPost(robot, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Destroy
     * @param {any} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    destroyRobotsIdDelete(id: any, options?: any): AxiosPromise<void> {
      return localVarFp
        .destroyRobotsIdDelete(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Robot
     * @param {any} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRobotRobotsIdGet(id: any, options?: any): AxiosPromise<Robot> {
      return localVarFp
        .getRobotRobotsIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Robots
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRobotsRobotsGet(options?: any): AxiosPromise<any> {
      return localVarFp
        .getRobotsRobotsGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update Robot
     * @param {any} id
     * @param {Robot} robot
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRobotRobotsIdPut(
      id: any,
      robot: Robot,
      options?: any,
    ): AxiosPromise<any> {
      return localVarFp
        .updateRobotRobotsIdPut(id, robot, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * RobotsApi - object-oriented interface
 * @export
 * @class RobotsApi
 * @extends {BaseAPI}
 */
export class RobotsApi extends BaseAPI {
  /**
   *
   * @summary Create Robot
   * @param {Robot} robot
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RobotsApi
   */
  public createRobotRobotsPost(robot: Robot, options?: AxiosRequestConfig) {
    return RobotsApiFp(this.configuration)
      .createRobotRobotsPost(robot, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Destroy
   * @param {any} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RobotsApi
   */
  public destroyRobotsIdDelete(id: any, options?: AxiosRequestConfig) {
    return RobotsApiFp(this.configuration)
      .destroyRobotsIdDelete(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Robot
   * @param {any} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RobotsApi
   */
  public getRobotRobotsIdGet(id: any, options?: AxiosRequestConfig) {
    return RobotsApiFp(this.configuration)
      .getRobotRobotsIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Robots
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RobotsApi
   */
  public getRobotsRobotsGet(options?: AxiosRequestConfig) {
    return RobotsApiFp(this.configuration)
      .getRobotsRobotsGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update Robot
   * @param {any} id
   * @param {Robot} robot
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RobotsApi
   */
  public updateRobotRobotsIdPut(
    id: any,
    robot: Robot,
    options?: AxiosRequestConfig,
  ) {
    return RobotsApiFp(this.configuration)
      .updateRobotRobotsIdPut(id, robot, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
